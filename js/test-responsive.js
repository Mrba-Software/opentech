/**
 * Test du menu mobile et du responsive design
 * Ce script v√©rifie que tous les √©l√©ments sont correctement affich√©s et fonctionnent
 */

// Fonction pour tester le menu mobile
function testMobileMenu() {
    console.log('üß™ Test du menu mobile...');
    
    const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
    const mobileMenu = document.querySelector('.mobile-menu');
    const hamburgerIcon = document.querySelector('.hamburger-icon');
    const closeIcon = document.querySelector('.close-icon');
    
    if (!mobileMenuBtn || !mobileMenu) {
        console.error('‚ùå √âl√©ments du menu mobile non trouv√©s');
        return false;
    }
    
    // Test 1: V√©rifier l'√©tat initial
    const isHidden = mobileMenu.classList.contains('hidden');
    console.log(`üì± √âtat initial du menu: ${isHidden ? 'ferm√©' : 'ouvert'} ‚úì`);
    
    // Test 2: Simuler un clic sur le bouton
    console.log('üñ±Ô∏è Simulation d\'un clic sur le bouton menu...');
    mobileMenuBtn.click();
    
    setTimeout(() => {
        const isOpenAfterClick = !mobileMenu.classList.contains('hidden');
        console.log(`üì± √âtat apr√®s clic: ${isOpenAfterClick ? 'ouvert' : 'ferm√©'} ${isOpenAfterClick ? '‚úì' : '‚ùå'}`);
        
        // Test 3: V√©rifier les ic√¥nes
        if (hamburgerIcon && closeIcon) {
            const hamburgerHidden = hamburgerIcon.classList.contains('hidden');
            const closeVisible = !closeIcon.classList.contains('hidden');
            console.log(`üçî Ic√¥ne hamburger: ${hamburgerHidden ? 'cach√©e' : 'visible'} ${hamburgerHidden ? '‚úì' : '‚ùå'}`);
            console.log(`‚ùå Ic√¥ne fermeture: ${closeVisible ? 'visible' : 'cach√©e'} ${closeVisible ? '‚úì' : '‚ùå'}`);
        }
        
        // Test 4: Fermer le menu
        console.log('üîÑ Test de fermeture du menu...');
        mobileMenuBtn.click();
        
        setTimeout(() => {
            const isClosedAfterSecondClick = mobileMenu.classList.contains('hidden');
            console.log(`üì± √âtat apr√®s second clic: ${isClosedAfterSecondClick ? 'ferm√©' : 'ouvert'} ${isClosedAfterSecondClick ? '‚úì' : '‚ùå'}`);
            
            console.log('‚úÖ Tests du menu mobile termin√©s');
        }, 100);
    }, 100);
}

// Fonction pour tester le responsive design
function testResponsiveDesign() {
    console.log('üì± Test du responsive design...');
    
    const viewport = {
        width: window.innerWidth,
        height: window.innerHeight
    };
    
    console.log(`üìè Taille de la fen√™tre: ${viewport.width}x${viewport.height}`);
    
    // D√©tecter le breakpoint actuel
    let breakpoint = 'mobile';
    if (viewport.width >= 1280) breakpoint = 'xl';
    else if (viewport.width >= 1024) breakpoint = 'lg';
    else if (viewport.width >= 768) breakpoint = 'md';
    else if (viewport.width >= 640) breakpoint = 'sm';
    
    console.log(`üìê Breakpoint actuel: ${breakpoint}`);
    
    // V√©rifier la visibilit√© des √©l√©ments
    const desktopNav = document.querySelector('.hidden.lg\\:block');
    const mobileButton = document.querySelector('.lg\\:hidden .mobile-menu-btn');
    
    if (viewport.width >= 1024) {
        console.log(`üñ•Ô∏è Mode desktop: Navigation ${desktopNav ? 'visible' : 'cach√©e'} ${desktopNav ? '‚úì' : '‚ùå'}`);
        console.log(`üì± Bouton mobile: ${mobileButton ? 'cach√©' : 'visible'} ${!mobileButton || mobileButton.offsetParent === null ? '‚úì' : '‚ùå'}`);
    } else {
        console.log(`üì± Mode mobile: Bouton ${mobileButton ? 'visible' : 'cach√©'} ${mobileButton ? '‚úì' : '‚ùå'}`);
    }
    
    // Tester le scroll lock
    const bodyStyle = getComputedStyle(document.body);
    console.log(`üîí Body overflow: ${bodyStyle.overflow}`);
    
    console.log('‚úÖ Tests responsive termin√©s');
}

// Fonction pour tester les performances
function testPerformance() {
    console.log('‚ö° Test des performances...');
    
    // Mesurer le temps de chargement de la navigation
    const startTime = performance.now();
    
    // V√©rifier si la navigation est charg√©e
    const navbar = document.getElementById('navbar-placeholder');
    const navContent = navbar?.innerHTML;
    
    if (navContent && navContent.trim() !== '') {
        const loadTime = performance.now() - startTime;
        console.log(`üöÄ Navigation charg√©e en: ${loadTime.toFixed(2)}ms ‚úì`);
    } else {
        console.log('‚ùå Navigation non charg√©e');
    }
    
    // V√©rifier les animations CSS
    const animatedElements = document.querySelectorAll('[class*="animate-"]');
    console.log(`üé≠ √âl√©ments anim√©s trouv√©s: ${animatedElements.length}`);
    
    console.log('‚úÖ Tests de performance termin√©s');
}

// Fonction principale de test
function runAllTests() {
    console.log('üöÄ D√©marrage des tests du site Opentech...');
    console.log('==========================================');
    
    // Attendre que la navigation soit charg√©e
    setTimeout(() => {
        testResponsiveDesign();
        console.log('');
        testMobileMenu();
        console.log('');
        testPerformance();
        console.log('');
        console.log('üéâ Tous les tests termin√©s !');
    }, 1000);
}

// Auto-ex√©cution si ce script est charg√©
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', runAllTests);
} else {
    runAllTests();
}

// Export pour utilisation manuelle
window.OpentechTests = {
    mobile: testMobileMenu,
    responsive: testResponsiveDesign,
    performance: testPerformance,
    all: runAllTests
};

console.log('üõ†Ô∏è Scripts de test charg√©s. Utilisez OpentechTests.all() pour lancer tous les tests.');
